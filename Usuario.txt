class Usuario{
    private string nombre;
    private string contraseña;
    private list<Eventos> listaEventos;
    private list<ToDo> listaTareas;
    private Agenda agenda;
    private Equipo equipo;
    private string puesto;

    public Usuario(string nombre, string contraseña, Agenda agenda, 
                   Equipo equipo, string puesto){
        this.nombre = nombre;
        this.contraseña = contraseña;
        this.agenda = agenda;
        this.equipo = equipo;
        this.puesto = puesto;
    }

#region getters
    public string getNombre(){
        return nombre;
    }
    public string getContraseña(){
        return contraseña;
    }
    public list getListaEventos(){
        return listaEventos;
    }
    public list getListaTareas(){
        return listaTodo;
    }
    public Agenda getAgenda(){
        return agenda;
    }
    public Equipo getEquipo(){
        return equipo;
    }
    public string getPuesto(){
        return puesto;
    }
#endregion
#region setter
    public void setNombre(string nombre){
        this.nombre = nombre;
    }
    public void setContraseña(string contraseña){
        this.contraseña = contraseña;
    }
    public void añadirEvento(Eventos evento){
        listaEventos.add(evento);
    }
    public void añadirTodo(ToDo tarea){
        listaTodo.add(tarea);
    }
    public void setAgenda(Agenda agenda){
        this.agenda = agenda;
    }
    public void setEquipo(Equipo equipo){
        this.equipo = equipo;
    }
    public void setPuesto(string puesto){
        this.puesto = puesto;
    }
#endregion

    public Eventos getEvento(int id){
        //Traversa la lista hasta encontrar el evento con el id otorgado
        foreach(const auto& e in listaEventos){
            if(e.getId() == id){
                return e;
            }
        }
        //Si llega hasta aquí, significa que no existe un evento con el id otorgado
        throw new exception("No se encontro el evento");
    }

    public list<Eventos> getEvento(date fecha){
        list<Eventos> resultado;
        //Traversa la lista hasta encontrar el evento con la fecha otorgada
        foreach(const auto& e in listaEventos){
            if(e.getFecha() == fecha){
                resultado.push(e);
            }
        }
        //Si la lista está vacía, significa que no hay ningun evento con la fecha dada
        if(resultado.size() == 0) throw new exception("No se encontro el evento");
        return resultado;
    }

    public list<Eventos> getEvento(string texto){}
        list<Eventos> resultado;
        //Traversa la lista hasta encontrar un evento que contenga el texto otorgado
        foreach(const auto& e in listaEventos){
            if(e.getTexto().find(texto) >= 0){
                resultado.push(e);
            }
        }
        //Si la lista está vacía, significa que no hay ningun evento con el texto dado
        if(resultado.size() == 0) throw new exception("No se encontro el evento");
        return resultado;
    }

    public void actualizar(string nombre, string contraseña, Agenda agenda, 
        Equipo equipo, string puesto){
        this.nombre = nombre;
        this.contraseña = contraseña;
        this.agenda = agenda;
        this.equipo = equipo;
        this.puesto = puesto;
    }
}